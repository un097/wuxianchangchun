package com.ctbri.wwcc.greenrobot;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ctbri.wwcc.greenrobot.HotLine;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table table_hotline.
*/
public class HotLineDao extends AbstractDao<HotLine, Long> {

    public static final String TABLENAME = "table_hotline";

    /**
     * Properties of entity HotLine.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Item_id = new Property(1, String.class, "item_id", false, "ITEM_ID");
        public final static Property Status = new Property(2, Integer.class, "status", false, "STATUS");
        public final static Property Num_name = new Property(3, String.class, "num_name", false, "NUM_NAME");
        public final static Property Tel_description = new Property(4, String.class, "tel_description", false, "TEL_DESCRIPTION");
        public final static Property Tel = new Property(5, String.class, "tel", false, "TEL");
        public final static Property Group_id = new Property(6, String.class, "group_id", false, "GROUP_ID");
        public final static Property Group_name = new Property(7, String.class, "group_name", false, "GROUP_NAME");
    };


    public HotLineDao(DaoConfig config) {
        super(config);
    }
    
    public HotLineDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'table_hotline' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'ITEM_ID' TEXT NOT NULL ," + // 1: item_id
                "'STATUS' INTEGER," + // 2: status
                "'NUM_NAME' TEXT," + // 3: num_name
                "'TEL_DESCRIPTION' TEXT," + // 4: tel_description
                "'TEL' TEXT," + // 5: tel
                "'GROUP_ID' TEXT," + // 6: group_id
                "'GROUP_NAME' TEXT);"); // 7: group_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'table_hotline'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HotLine entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getItem_id());
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(3, status);
        }
 
        String num_name = entity.getNum_name();
        if (num_name != null) {
            stmt.bindString(4, num_name);
        }
 
        String tel_description = entity.getTel_description();
        if (tel_description != null) {
            stmt.bindString(5, tel_description);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(6, tel);
        }
 
        String group_id = entity.getGroup_id();
        if (group_id != null) {
            stmt.bindString(7, group_id);
        }
 
        String group_name = entity.getGroup_name();
        if (group_name != null) {
            stmt.bindString(8, group_name);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HotLine readEntity(Cursor cursor, int offset) {
        HotLine entity = new HotLine( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // item_id
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // status
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // num_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tel_description
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // tel
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // group_id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // group_name
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HotLine entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setItem_id(cursor.getString(offset + 1));
        entity.setStatus(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setNum_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTel_description(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTel(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGroup_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGroup_name(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HotLine entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HotLine entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
